import heapq

# Define the goal state
GOAL_STATE = [[1, 2, 3],
              [8, 0, 4],
              [7, 6, 5]]   # 0 represents the blank tile

# Function to calculate misplaced tile heuristic
def misplaced_tiles(state):
    count = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0 and state[i][j] != GOAL_STATE[i][j]:
                count += 1
    return count

# Function to get the position of blank tile (0)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate possible moves
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]  # deep copy
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# Convert state to tuple (hashable)
def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

# A* Algorithm
def astar(start):
    pq = []  # priority queue
    heapq.heappush(pq, (misplaced_tiles(start), 0, start, []))  # (f, g, state, path)
    visited = set()

    while pq:
        f, g, state, path = heapq.heappop(pq)

        if state == GOAL_STATE:
            return path + [state]   # found solution

        visited.add(state_to_tuple(state))

        for neighbor in get_neighbors(state):
            if state_to_tuple(neighbor) not in visited:
                new_g = g + 1
                new_h = misplaced_tiles(neighbor)
                new_f = new_g + new_h
                heapq.heappush(pq, (new_f, new_g, neighbor, path + [state]))

    return None  # No solution

# Print puzzle state
def print_state(state):
    for row in state:
        print(row)
    print()

# Example usage with user input
if __name__ == "__main__":
    print("Enter the initial 8-puzzle state (use 0 for blank):")
    start_state = []
    for i in range(3):
        row = list(map(int, input(f"Row {i+1} (space-separated 3 numbers): ").split()))
        start_state.append(row)

    solution = astar(start_state)

    if solution:
        print("\nSolution found in", len(solution)-1, "moves:\n")
        for step in solution:
            print_state(step)
    else:
        print("No solution exists!")
